version: "3.8"

services:
  # PostgreSQL Datenbank
  db:
    image: postgres:14-alpine
    container_name: swissairdry-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: swissairdry
      POSTGRES_DB: swissairdry
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - swissairdry-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  # MQTT Broker
  mqtt:
    image: eclipse-mosquitto:2.0
    container_name: swissairdry-mqtt
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - mosquitto_data:/mosquitto/data
      - mosquitto_log:/mosquitto/log
    networks:
      - swissairdry-network
    healthcheck:
      test: ["CMD", "mosquitto_sub", "-t", "$$", "-C", "1", "-i", "healthcheck", "-W", "3"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - MQTT_ALLOW_ANONYMOUS=true
      - MQTT_SSL_ENABLED=false
      - MQTT_AUTH_ENABLED=false
  
  # Main API (FastAPI)
  api:
    image: ${REGISTRY_URL:-ghcr.io/arduinoeinsteiger}/swissairdry-api:${IMAGE_TAG:-latest}
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: swissairdry-api
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=5000
      - DB_HOST=db
      - MQTT_BROKER=mqtt
    volumes:
      - ./api:/app
      - api_logs:/app/logs
    networks:
      - swissairdry-network
    depends_on:
      db:
        condition: service_healthy
      mqtt:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # Simple API (FastAPI)
  simple-api:
    image: ${REGISTRY_URL:-ghcr.io/arduinoeinsteiger}/swissairdry-simple-api:${IMAGE_TAG:-latest}
    build:
      context: ./simple-api
      dockerfile: Dockerfile
    container_name: swissairdry-simple-api
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=5001
      - MQTT_BROKER=mqtt
      - MQTT_CLIENT_ID=swissairdry-simple-api
    volumes:
      - ./simple-api:/app
      - simple_api_logs:/app/logs
    networks:
      - swissairdry-network
    depends_on:
      mqtt:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nextcloud
  nextcloud:
    image: nextcloud:26-fpm-alpine
    container_name: swissairdry-nextcloud
    restart: unless-stopped
    volumes:
      - nextcloud_data:/var/www/html
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=nextcloud
      - NEXTCLOUD_ADMIN_USER=admin
      - NEXTCLOUD_ADMIN_PASSWORD=swissairdry
      - NEXTCLOUD_TRUSTED_DOMAINS=localhost
    networks:
      - swissairdry-network
    depends_on:
      - db

  # Nginx f√ºr Nextcloud
  nginx:
    image: nginx:alpine
    container_name: swissairdry-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - nextcloud_data:/var/www/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - swissairdry-network
    depends_on:
      - nextcloud

  # Portainer
  portainer:
    image: portainer/portainer-ce:latest
    container_name: swissairdry-portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - swissairdry-network

networks:
  swissairdry-network:
    driver: bridge

volumes:
  postgres_data:
  mosquitto_data:
  mosquitto_log:
  api_logs:
  simple_api_logs:
  nextcloud_data:
  portainer_data: 